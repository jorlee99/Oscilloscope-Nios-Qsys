// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2020 00:28:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dds_and_nios_lab
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dds_and_nios_lab_vlg_sample_tst(
	ADC_DOUT,
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACLRCK,
	CLOCK2_50,
	CLOCK3_50,
	CLOCK4_50,
	CLOCK_50,
	DRAM_DQ,
	FPGA_I2C_SDAT,
	GPIO_0,
	GPIO_1,
	IRDA_RXD,
	KEY,
	PS2_CLK,
	PS2_CLK2,
	PS2_DAT,
	PS2_DAT2,
	SW,
	TD_CLK27,
	TD_DATA,
	TD_HS,
	TD_VS,
	sampler_tx
);
input  ADC_DOUT;
input  AUD_ADCDAT;
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACLRCK;
input  CLOCK2_50;
input  CLOCK3_50;
input  CLOCK4_50;
input  CLOCK_50;
input [15:0] DRAM_DQ;
input  FPGA_I2C_SDAT;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input  IRDA_RXD;
input [3:0] KEY;
input  PS2_CLK;
input  PS2_CLK2;
input  PS2_DAT;
input  PS2_DAT2;
input [9:0] SW;
input  TD_CLK27;
input [7:0] TD_DATA;
input  TD_HS;
input  TD_VS;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_DOUT or AUD_ADCDAT or AUD_ADCLRCK or AUD_BCLK or AUD_DACLRCK or CLOCK2_50 or CLOCK3_50 or CLOCK4_50 or CLOCK_50 or DRAM_DQ or FPGA_I2C_SDAT or GPIO_0 or GPIO_1 or IRDA_RXD or KEY or PS2_CLK or PS2_CLK2 or PS2_DAT or PS2_DAT2 or SW or TD_CLK27 or TD_DATA or TD_HS or TD_VS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dds_and_nios_lab_vlg_check_tst (
	ADC_CONVST,
	ADC_DIN,
	ADC_SCLK,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_LDQM,
	DRAM_RAS_N,
	DRAM_UDQM,
	DRAM_WE_N,
	FAN_CTRL,
	FPGA_I2C_SCLK,
	FPGA_I2C_SDAT,
	GPIO_0,
	GPIO_1,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	IRDA_TXD,
	LEDR,
	LFSR,
	PS2_CLK,
	PS2_CLK2,
	PS2_DAT,
	PS2_DAT2,
	TD_RESET_N,
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC_N,
	VGA_VS,
	sampler_rx
);
input  ADC_CONVST;
input  ADC_DIN;
input  ADC_SCLK;
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACDAT;
input  AUD_DACLRCK;
input  AUD_XCK;
input [12:0] DRAM_ADDR;
input [1:0] DRAM_BA;
input  DRAM_CAS_N;
input  DRAM_CKE;
input  DRAM_CLK;
input  DRAM_CS_N;
input [15:0] DRAM_DQ;
input  DRAM_LDQM;
input  DRAM_RAS_N;
input  DRAM_UDQM;
input  DRAM_WE_N;
input  FAN_CTRL;
input  FPGA_I2C_SCLK;
input  FPGA_I2C_SDAT;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input  IRDA_TXD;
input [9:0] LEDR;
input [4:0] LFSR;
input  PS2_CLK;
input  PS2_CLK2;
input  PS2_DAT;
input  PS2_DAT2;
input  TD_RESET_N;
input [7:0] VGA_B;
input  VGA_BLANK_N;
input  VGA_CLK;
input [7:0] VGA_G;
input  VGA_HS;
input [7:0] VGA_R;
input  VGA_SYNC_N;
input  VGA_VS;
input sampler_rx;

reg  ADC_CONVST_expected;
reg  ADC_DIN_expected;
reg  ADC_SCLK_expected;
reg  AUD_ADCLRCK_expected;
reg  AUD_BCLK_expected;
reg  AUD_DACDAT_expected;
reg  AUD_DACLRCK_expected;
reg  AUD_XCK_expected;
reg [12:0] DRAM_ADDR_expected;
reg [1:0] DRAM_BA_expected;
reg  DRAM_CAS_N_expected;
reg  DRAM_CKE_expected;
reg  DRAM_CLK_expected;
reg  DRAM_CS_N_expected;
reg [15:0] DRAM_DQ_expected;
reg  DRAM_LDQM_expected;
reg  DRAM_RAS_N_expected;
reg  DRAM_UDQM_expected;
reg  DRAM_WE_N_expected;
reg  FAN_CTRL_expected;
reg  FPGA_I2C_SCLK_expected;
reg  FPGA_I2C_SDAT_expected;
reg [35:0] GPIO_0_expected;
reg [35:0] GPIO_1_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg  IRDA_TXD_expected;
reg [9:0] LEDR_expected;
reg [4:0] LFSR_expected;
reg  PS2_CLK_expected;
reg  PS2_CLK2_expected;
reg  PS2_DAT_expected;
reg  PS2_DAT2_expected;
reg  TD_RESET_N_expected;
reg [7:0] VGA_B_expected;
reg  VGA_BLANK_N_expected;
reg  VGA_CLK_expected;
reg [7:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [7:0] VGA_R_expected;
reg  VGA_SYNC_N_expected;
reg  VGA_VS_expected;

reg  ADC_CONVST_prev;
reg  ADC_DIN_prev;
reg  ADC_SCLK_prev;
reg  AUD_ADCLRCK_prev;
reg  AUD_BCLK_prev;
reg  AUD_DACDAT_prev;
reg  AUD_DACLRCK_prev;
reg  AUD_XCK_prev;
reg [12:0] DRAM_ADDR_prev;
reg [1:0] DRAM_BA_prev;
reg  DRAM_CAS_N_prev;
reg  DRAM_CKE_prev;
reg  DRAM_CLK_prev;
reg  DRAM_CS_N_prev;
reg [15:0] DRAM_DQ_prev;
reg  DRAM_LDQM_prev;
reg  DRAM_RAS_N_prev;
reg  DRAM_UDQM_prev;
reg  DRAM_WE_N_prev;
reg  FAN_CTRL_prev;
reg  FPGA_I2C_SCLK_prev;
reg  FPGA_I2C_SDAT_prev;
reg [35:0] GPIO_0_prev;
reg [35:0] GPIO_1_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg  IRDA_TXD_prev;
reg [9:0] LEDR_prev;
reg [4:0] LFSR_prev;
reg  PS2_CLK_prev;
reg  PS2_CLK2_prev;
reg  PS2_DAT_prev;
reg  PS2_DAT2_prev;
reg  TD_RESET_N_prev;
reg [7:0] VGA_B_prev;
reg  VGA_BLANK_N_prev;
reg  VGA_CLK_prev;
reg [7:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [7:0] VGA_R_prev;
reg  VGA_SYNC_N_prev;
reg  VGA_VS_prev;

reg [4:0] LFSR_expected_prev;

reg [4:0] last_LFSR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:46] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 46'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADC_CONVST_prev = ADC_CONVST;
	ADC_DIN_prev = ADC_DIN;
	ADC_SCLK_prev = ADC_SCLK;
	AUD_ADCLRCK_prev = AUD_ADCLRCK;
	AUD_BCLK_prev = AUD_BCLK;
	AUD_DACDAT_prev = AUD_DACDAT;
	AUD_DACLRCK_prev = AUD_DACLRCK;
	AUD_XCK_prev = AUD_XCK;
	DRAM_ADDR_prev = DRAM_ADDR;
	DRAM_BA_prev = DRAM_BA;
	DRAM_CAS_N_prev = DRAM_CAS_N;
	DRAM_CKE_prev = DRAM_CKE;
	DRAM_CLK_prev = DRAM_CLK;
	DRAM_CS_N_prev = DRAM_CS_N;
	DRAM_DQ_prev = DRAM_DQ;
	DRAM_LDQM_prev = DRAM_LDQM;
	DRAM_RAS_N_prev = DRAM_RAS_N;
	DRAM_UDQM_prev = DRAM_UDQM;
	DRAM_WE_N_prev = DRAM_WE_N;
	FAN_CTRL_prev = FAN_CTRL;
	FPGA_I2C_SCLK_prev = FPGA_I2C_SCLK;
	FPGA_I2C_SDAT_prev = FPGA_I2C_SDAT;
	GPIO_0_prev = GPIO_0;
	GPIO_1_prev = GPIO_1;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	IRDA_TXD_prev = IRDA_TXD;
	LEDR_prev = LEDR;
	LFSR_prev = LFSR;
	PS2_CLK_prev = PS2_CLK;
	PS2_CLK2_prev = PS2_CLK2;
	PS2_DAT_prev = PS2_DAT;
	PS2_DAT2_prev = PS2_DAT2;
	TD_RESET_N_prev = TD_RESET_N;
	VGA_B_prev = VGA_B;
	VGA_BLANK_N_prev = VGA_BLANK_N;
	VGA_CLK_prev = VGA_CLK;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	VGA_R_prev = VGA_R;
	VGA_SYNC_N_prev = VGA_SYNC_N;
	VGA_VS_prev = VGA_VS;
end

// update expected /o prevs

always @(trigger)
begin
	LFSR_expected_prev = LFSR_expected;
end


// expected LFSR[ 4 ]
initial
begin
	LFSR_expected[4] = 1'bX;
end 
// expected LFSR[ 3 ]
initial
begin
	LFSR_expected[3] = 1'bX;
end 
// expected LFSR[ 2 ]
initial
begin
	LFSR_expected[2] = 1'bX;
end 
// expected LFSR[ 1 ]
initial
begin
	LFSR_expected[1] = 1'bX;
end 
// expected LFSR[ 0 ]
initial
begin
	LFSR_expected[0] = 1'bX;
end 
// generate trigger
always @(ADC_CONVST_expected or ADC_CONVST or ADC_DIN_expected or ADC_DIN or ADC_SCLK_expected or ADC_SCLK or AUD_ADCLRCK_expected or AUD_ADCLRCK or AUD_BCLK_expected or AUD_BCLK or AUD_DACDAT_expected or AUD_DACDAT or AUD_DACLRCK_expected or AUD_DACLRCK or AUD_XCK_expected or AUD_XCK or DRAM_ADDR_expected or DRAM_ADDR or DRAM_BA_expected or DRAM_BA or DRAM_CAS_N_expected or DRAM_CAS_N or DRAM_CKE_expected or DRAM_CKE or DRAM_CLK_expected or DRAM_CLK or DRAM_CS_N_expected or DRAM_CS_N or DRAM_DQ_expected or DRAM_DQ or DRAM_LDQM_expected or DRAM_LDQM or DRAM_RAS_N_expected or DRAM_RAS_N or DRAM_UDQM_expected or DRAM_UDQM or DRAM_WE_N_expected or DRAM_WE_N or FAN_CTRL_expected or FAN_CTRL or FPGA_I2C_SCLK_expected or FPGA_I2C_SCLK or FPGA_I2C_SDAT_expected or FPGA_I2C_SDAT or GPIO_0_expected or GPIO_0 or GPIO_1_expected or GPIO_1 or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or IRDA_TXD_expected or IRDA_TXD or LEDR_expected or LEDR or LFSR_expected or LFSR or PS2_CLK_expected or PS2_CLK or PS2_CLK2_expected or PS2_CLK2 or PS2_DAT_expected or PS2_DAT or PS2_DAT2_expected or PS2_DAT2 or TD_RESET_N_expected or TD_RESET_N or VGA_B_expected or VGA_B or VGA_BLANK_N_expected or VGA_BLANK_N or VGA_CLK_expected or VGA_CLK or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or VGA_R_expected or VGA_R or VGA_SYNC_N_expected or VGA_SYNC_N or VGA_VS_expected or VGA_VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADC_CONVST = %b | expected ADC_DIN = %b | expected ADC_SCLK = %b | expected AUD_ADCLRCK = %b | expected AUD_BCLK = %b | expected AUD_DACDAT = %b | expected AUD_DACLRCK = %b | expected AUD_XCK = %b | expected DRAM_ADDR = %b | expected DRAM_BA = %b | expected DRAM_CAS_N = %b | expected DRAM_CKE = %b | expected DRAM_CLK = %b | expected DRAM_CS_N = %b | expected DRAM_DQ = %b | expected DRAM_LDQM = %b | expected DRAM_RAS_N = %b | expected DRAM_UDQM = %b | expected DRAM_WE_N = %b | expected FAN_CTRL = %b | expected FPGA_I2C_SCLK = %b | expected FPGA_I2C_SDAT = %b | expected GPIO_0 = %b | expected GPIO_1 = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected IRDA_TXD = %b | expected LEDR = %b | expected LFSR = %b | expected PS2_CLK = %b | expected PS2_CLK2 = %b | expected PS2_DAT = %b | expected PS2_DAT2 = %b | expected TD_RESET_N = %b | expected VGA_B = %b | expected VGA_BLANK_N = %b | expected VGA_CLK = %b | expected VGA_G = %b | expected VGA_HS = %b | expected VGA_R = %b | expected VGA_SYNC_N = %b | expected VGA_VS = %b | ",ADC_CONVST_expected_prev,ADC_DIN_expected_prev,ADC_SCLK_expected_prev,AUD_ADCLRCK_expected_prev,AUD_BCLK_expected_prev,AUD_DACDAT_expected_prev,AUD_DACLRCK_expected_prev,AUD_XCK_expected_prev,DRAM_ADDR_expected_prev,DRAM_BA_expected_prev,DRAM_CAS_N_expected_prev,DRAM_CKE_expected_prev,DRAM_CLK_expected_prev,DRAM_CS_N_expected_prev,DRAM_DQ_expected_prev,DRAM_LDQM_expected_prev,DRAM_RAS_N_expected_prev,DRAM_UDQM_expected_prev,DRAM_WE_N_expected_prev,FAN_CTRL_expected_prev,FPGA_I2C_SCLK_expected_prev,FPGA_I2C_SDAT_expected_prev,GPIO_0_expected_prev,GPIO_1_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,IRDA_TXD_expected_prev,LEDR_expected_prev,LFSR_expected_prev,PS2_CLK_expected_prev,PS2_CLK2_expected_prev,PS2_DAT_expected_prev,PS2_DAT2_expected_prev,TD_RESET_N_expected_prev,VGA_B_expected_prev,VGA_BLANK_N_expected_prev,VGA_CLK_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,VGA_R_expected_prev,VGA_SYNC_N_expected_prev,VGA_VS_expected_prev);
	$display("| real ADC_CONVST = %b | real ADC_DIN = %b | real ADC_SCLK = %b | real AUD_ADCLRCK = %b | real AUD_BCLK = %b | real AUD_DACDAT = %b | real AUD_DACLRCK = %b | real AUD_XCK = %b | real DRAM_ADDR = %b | real DRAM_BA = %b | real DRAM_CAS_N = %b | real DRAM_CKE = %b | real DRAM_CLK = %b | real DRAM_CS_N = %b | real DRAM_DQ = %b | real DRAM_LDQM = %b | real DRAM_RAS_N = %b | real DRAM_UDQM = %b | real DRAM_WE_N = %b | real FAN_CTRL = %b | real FPGA_I2C_SCLK = %b | real FPGA_I2C_SDAT = %b | real GPIO_0 = %b | real GPIO_1 = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real IRDA_TXD = %b | real LEDR = %b | real LFSR = %b | real PS2_CLK = %b | real PS2_CLK2 = %b | real PS2_DAT = %b | real PS2_DAT2 = %b | real TD_RESET_N = %b | real VGA_B = %b | real VGA_BLANK_N = %b | real VGA_CLK = %b | real VGA_G = %b | real VGA_HS = %b | real VGA_R = %b | real VGA_SYNC_N = %b | real VGA_VS = %b | ",ADC_CONVST_prev,ADC_DIN_prev,ADC_SCLK_prev,AUD_ADCLRCK_prev,AUD_BCLK_prev,AUD_DACDAT_prev,AUD_DACLRCK_prev,AUD_XCK_prev,DRAM_ADDR_prev,DRAM_BA_prev,DRAM_CAS_N_prev,DRAM_CKE_prev,DRAM_CLK_prev,DRAM_CS_N_prev,DRAM_DQ_prev,DRAM_LDQM_prev,DRAM_RAS_N_prev,DRAM_UDQM_prev,DRAM_WE_N_prev,FAN_CTRL_prev,FPGA_I2C_SCLK_prev,FPGA_I2C_SDAT_prev,GPIO_0_prev,GPIO_1_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,IRDA_TXD_prev,LEDR_prev,LFSR_prev,PS2_CLK_prev,PS2_CLK2_prev,PS2_DAT_prev,PS2_DAT2_prev,TD_RESET_N_prev,VGA_B_prev,VGA_BLANK_N_prev,VGA_CLK_prev,VGA_G_prev,VGA_HS_prev,VGA_R_prev,VGA_SYNC_N_prev,VGA_VS_prev);
`endif
	if (
		( LFSR_expected_prev[0] !== 1'bx ) && ( LFSR_prev[0] !== LFSR_expected_prev[0] )
		&& ((LFSR_expected_prev[0] !== last_LFSR_exp[0]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LFSR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LFSR_expected_prev);
		$display ("     Real value = %b", LFSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_LFSR_exp[0] = LFSR_expected_prev[0];
	end
	if (
		( LFSR_expected_prev[1] !== 1'bx ) && ( LFSR_prev[1] !== LFSR_expected_prev[1] )
		&& ((LFSR_expected_prev[1] !== last_LFSR_exp[1]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LFSR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LFSR_expected_prev);
		$display ("     Real value = %b", LFSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_LFSR_exp[1] = LFSR_expected_prev[1];
	end
	if (
		( LFSR_expected_prev[2] !== 1'bx ) && ( LFSR_prev[2] !== LFSR_expected_prev[2] )
		&& ((LFSR_expected_prev[2] !== last_LFSR_exp[2]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LFSR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LFSR_expected_prev);
		$display ("     Real value = %b", LFSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_LFSR_exp[2] = LFSR_expected_prev[2];
	end
	if (
		( LFSR_expected_prev[3] !== 1'bx ) && ( LFSR_prev[3] !== LFSR_expected_prev[3] )
		&& ((LFSR_expected_prev[3] !== last_LFSR_exp[3]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LFSR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LFSR_expected_prev);
		$display ("     Real value = %b", LFSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_LFSR_exp[3] = LFSR_expected_prev[3];
	end
	if (
		( LFSR_expected_prev[4] !== 1'bx ) && ( LFSR_prev[4] !== LFSR_expected_prev[4] )
		&& ((LFSR_expected_prev[4] !== last_LFSR_exp[4]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LFSR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LFSR_expected_prev);
		$display ("     Real value = %b", LFSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_LFSR_exp[4] = LFSR_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module dds_and_nios_lab_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_DOUT;
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLOCK2_50;
reg CLOCK3_50;
reg CLOCK4_50;
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg treg_FPGA_I2C_SDAT;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg IRDA_RXD;
reg [3:0] KEY;
reg treg_PS2_CLK;
reg treg_PS2_CLK2;
reg treg_PS2_DAT;
reg treg_PS2_DAT2;
reg [9:0] SW;
reg TD_CLK27;
reg [7:0] TD_DATA;
reg TD_HS;
reg TD_VS;
// wires                                               
wire ADC_CONVST;
wire ADC_DIN;
wire ADC_SCLK;
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire FAN_CTRL;
wire FPGA_I2C_SCLK;
wire FPGA_I2C_SDAT;
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire IRDA_TXD;
wire [9:0] LEDR;
wire [4:0] LFSR;
wire PS2_CLK;
wire PS2_CLK2;
wire PS2_DAT;
wire PS2_DAT2;
wire TD_RESET_N;
wire [7:0] VGA_B;
wire VGA_BLANK_N;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_HS;
wire [7:0] VGA_R;
wire VGA_SYNC_N;
wire VGA_VS;

wire sampler;                             

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign DRAM_DQ = treg_DRAM_DQ;
assign FPGA_I2C_SDAT = treg_FPGA_I2C_SDAT;
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
assign PS2_CLK = treg_PS2_CLK;
assign PS2_CLK2 = treg_PS2_CLK2;
assign PS2_DAT = treg_PS2_DAT;
assign PS2_DAT2 = treg_PS2_DAT2;
dds_and_nios_lab i1 (
// port map - connection between master ports and signals/registers   
	.ADC_CONVST(ADC_CONVST),
	.ADC_DIN(ADC_DIN),
	.ADC_DOUT(ADC_DOUT),
	.ADC_SCLK(ADC_SCLK),
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK2_50(CLOCK2_50),
	.CLOCK3_50(CLOCK3_50),
	.CLOCK4_50(CLOCK4_50),
	.CLOCK_50(CLOCK_50),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.FAN_CTRL(FAN_CTRL),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.IRDA_RXD(IRDA_RXD),
	.IRDA_TXD(IRDA_TXD),
	.KEY(KEY),
	.LEDR(LEDR),
	.LFSR(LFSR),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2),
	.SW(SW),
	.TD_CLK27(TD_CLK27),
	.TD_DATA(TD_DATA),
	.TD_HS(TD_HS),
	.TD_RESET_N(TD_RESET_N),
	.TD_VS(TD_VS),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

dds_and_nios_lab_vlg_sample_tst tb_sample (
	.ADC_DOUT(ADC_DOUT),
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACLRCK(AUD_DACLRCK),
	.CLOCK2_50(CLOCK2_50),
	.CLOCK3_50(CLOCK3_50),
	.CLOCK4_50(CLOCK4_50),
	.CLOCK_50(CLOCK_50),
	.DRAM_DQ(DRAM_DQ),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.IRDA_RXD(IRDA_RXD),
	.KEY(KEY),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2),
	.SW(SW),
	.TD_CLK27(TD_CLK27),
	.TD_DATA(TD_DATA),
	.TD_HS(TD_HS),
	.TD_VS(TD_VS),
	.sampler_tx(sampler)
);

dds_and_nios_lab_vlg_check_tst tb_out(
	.ADC_CONVST(ADC_CONVST),
	.ADC_DIN(ADC_DIN),
	.ADC_SCLK(ADC_SCLK),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.FAN_CTRL(FAN_CTRL),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.IRDA_TXD(IRDA_TXD),
	.LEDR(LEDR),
	.LFSR(LFSR),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2),
	.TD_RESET_N(TD_RESET_N),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS),
	.sampler_rx(sampler)
);
endmodule

