// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2020 01:26:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lfsr_flipflop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lfsr_flipflop_vlg_sample_tst(
	clk,
	lfsrin,
	sampler_tx
);
input  clk;
input [4:0] lfsrin;
output sampler_tx;

reg sample;
time current_time;
always @(clk or lfsrin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lfsr_flipflop_vlg_check_tst (
	lfsr0,
	lfsr1,
	lfsr2,
	lfsr3,
	lfsr4,
	lfsrtest,
	sampler_rx
);
input  lfsr0;
input  lfsr1;
input  lfsr2;
input  lfsr3;
input  lfsr4;
input [4:0] lfsrtest;
input sampler_rx;

reg  lfsr0_expected;
reg  lfsr1_expected;
reg  lfsr2_expected;
reg  lfsr3_expected;
reg  lfsr4_expected;
reg [4:0] lfsrtest_expected;

reg  lfsr0_prev;
reg  lfsr1_prev;
reg  lfsr2_prev;
reg  lfsr3_prev;
reg  lfsr4_prev;
reg [4:0] lfsrtest_prev;

reg  lfsr0_expected_prev;
reg  lfsr1_expected_prev;
reg  lfsr2_expected_prev;
reg  lfsr3_expected_prev;
reg  lfsr4_expected_prev;
reg [4:0] lfsrtest_expected_prev;

reg  last_lfsr0_exp;
reg  last_lfsr1_exp;
reg  last_lfsr2_exp;
reg  last_lfsr3_exp;
reg  last_lfsr4_exp;
reg [4:0] last_lfsrtest_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	lfsr0_prev = lfsr0;
	lfsr1_prev = lfsr1;
	lfsr2_prev = lfsr2;
	lfsr3_prev = lfsr3;
	lfsr4_prev = lfsr4;
	lfsrtest_prev = lfsrtest;
end

// update expected /o prevs

always @(trigger)
begin
	lfsr0_expected_prev = lfsr0_expected;
	lfsr1_expected_prev = lfsr1_expected;
	lfsr2_expected_prev = lfsr2_expected;
	lfsr3_expected_prev = lfsr3_expected;
	lfsr4_expected_prev = lfsr4_expected;
	lfsrtest_expected_prev = lfsrtest_expected;
end



// expected lfsr0
initial
begin
	lfsr0_expected = 1'bX;
end 

// expected lfsr1
initial
begin
	lfsr1_expected = 1'bX;
end 

// expected lfsr2
initial
begin
	lfsr2_expected = 1'bX;
end 

// expected lfsr3
initial
begin
	lfsr3_expected = 1'bX;
end 

// expected lfsr4
initial
begin
	lfsr4_expected = 1'bX;
end 
// expected lfsrtest[ 4 ]
initial
begin
	lfsrtest_expected[4] = 1'bX;
end 
// expected lfsrtest[ 3 ]
initial
begin
	lfsrtest_expected[3] = 1'bX;
end 
// expected lfsrtest[ 2 ]
initial
begin
	lfsrtest_expected[2] = 1'bX;
end 
// expected lfsrtest[ 1 ]
initial
begin
	lfsrtest_expected[1] = 1'bX;
end 
// expected lfsrtest[ 0 ]
initial
begin
	lfsrtest_expected[0] = 1'bX;
end 
// generate trigger
always @(lfsr0_expected or lfsr0 or lfsr1_expected or lfsr1 or lfsr2_expected or lfsr2 or lfsr3_expected or lfsr3 or lfsr4_expected or lfsr4 or lfsrtest_expected or lfsrtest)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected lfsr0 = %b | expected lfsr1 = %b | expected lfsr2 = %b | expected lfsr3 = %b | expected lfsr4 = %b | expected lfsrtest = %b | ",lfsr0_expected_prev,lfsr1_expected_prev,lfsr2_expected_prev,lfsr3_expected_prev,lfsr4_expected_prev,lfsrtest_expected_prev);
	$display("| real lfsr0 = %b | real lfsr1 = %b | real lfsr2 = %b | real lfsr3 = %b | real lfsr4 = %b | real lfsrtest = %b | ",lfsr0_prev,lfsr1_prev,lfsr2_prev,lfsr3_prev,lfsr4_prev,lfsrtest_prev);
`endif
	if (
		( lfsr0_expected_prev !== 1'bx ) && ( lfsr0_prev !== lfsr0_expected_prev )
		&& ((lfsr0_expected_prev !== last_lfsr0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsr0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsr0_expected_prev);
		$display ("     Real value = %b", lfsr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lfsr0_exp = lfsr0_expected_prev;
	end
	if (
		( lfsr1_expected_prev !== 1'bx ) && ( lfsr1_prev !== lfsr1_expected_prev )
		&& ((lfsr1_expected_prev !== last_lfsr1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsr1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsr1_expected_prev);
		$display ("     Real value = %b", lfsr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lfsr1_exp = lfsr1_expected_prev;
	end
	if (
		( lfsr2_expected_prev !== 1'bx ) && ( lfsr2_prev !== lfsr2_expected_prev )
		&& ((lfsr2_expected_prev !== last_lfsr2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsr2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsr2_expected_prev);
		$display ("     Real value = %b", lfsr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lfsr2_exp = lfsr2_expected_prev;
	end
	if (
		( lfsr3_expected_prev !== 1'bx ) && ( lfsr3_prev !== lfsr3_expected_prev )
		&& ((lfsr3_expected_prev !== last_lfsr3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsr3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsr3_expected_prev);
		$display ("     Real value = %b", lfsr3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_lfsr3_exp = lfsr3_expected_prev;
	end
	if (
		( lfsr4_expected_prev !== 1'bx ) && ( lfsr4_prev !== lfsr4_expected_prev )
		&& ((lfsr4_expected_prev !== last_lfsr4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsr4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsr4_expected_prev);
		$display ("     Real value = %b", lfsr4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lfsr4_exp = lfsr4_expected_prev;
	end
	if (
		( lfsrtest_expected_prev[0] !== 1'bx ) && ( lfsrtest_prev[0] !== lfsrtest_expected_prev[0] )
		&& ((lfsrtest_expected_prev[0] !== last_lfsrtest_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsrtest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsrtest_expected_prev);
		$display ("     Real value = %b", lfsrtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lfsrtest_exp[0] = lfsrtest_expected_prev[0];
	end
	if (
		( lfsrtest_expected_prev[1] !== 1'bx ) && ( lfsrtest_prev[1] !== lfsrtest_expected_prev[1] )
		&& ((lfsrtest_expected_prev[1] !== last_lfsrtest_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsrtest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsrtest_expected_prev);
		$display ("     Real value = %b", lfsrtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lfsrtest_exp[1] = lfsrtest_expected_prev[1];
	end
	if (
		( lfsrtest_expected_prev[2] !== 1'bx ) && ( lfsrtest_prev[2] !== lfsrtest_expected_prev[2] )
		&& ((lfsrtest_expected_prev[2] !== last_lfsrtest_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsrtest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsrtest_expected_prev);
		$display ("     Real value = %b", lfsrtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lfsrtest_exp[2] = lfsrtest_expected_prev[2];
	end
	if (
		( lfsrtest_expected_prev[3] !== 1'bx ) && ( lfsrtest_prev[3] !== lfsrtest_expected_prev[3] )
		&& ((lfsrtest_expected_prev[3] !== last_lfsrtest_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsrtest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsrtest_expected_prev);
		$display ("     Real value = %b", lfsrtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lfsrtest_exp[3] = lfsrtest_expected_prev[3];
	end
	if (
		( lfsrtest_expected_prev[4] !== 1'bx ) && ( lfsrtest_prev[4] !== lfsrtest_expected_prev[4] )
		&& ((lfsrtest_expected_prev[4] !== last_lfsrtest_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lfsrtest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lfsrtest_expected_prev);
		$display ("     Real value = %b", lfsrtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lfsrtest_exp[4] = lfsrtest_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lfsr_flipflop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] lfsrin;
// wires                                               
wire lfsr0;
wire lfsr1;
wire lfsr2;
wire lfsr3;
wire lfsr4;
wire [4:0] lfsrtest;

wire sampler;                             

// assign statements (if any)                          
lfsr_flipflop i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.lfsr0(lfsr0),
	.lfsr1(lfsr1),
	.lfsr2(lfsr2),
	.lfsr3(lfsr3),
	.lfsr4(lfsr4),
	.lfsrin(lfsrin),
	.lfsrtest(lfsrtest)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// lfsrin[ 4 ]
initial
begin
	lfsrin[4] = 1'b0;
end 
// lfsrin[ 3 ]
initial
begin
	lfsrin[3] = 1'b0;
end 
// lfsrin[ 2 ]
initial
begin
	lfsrin[2] = 1'b0;
end 
// lfsrin[ 1 ]
initial
begin
	lfsrin[1] = 1'b0;
end 
// lfsrin[ 0 ]
initial
begin
	lfsrin[0] = 1'b1;
end 

lfsr_flipflop_vlg_sample_tst tb_sample (
	.clk(clk),
	.lfsrin(lfsrin),
	.sampler_tx(sampler)
);

lfsr_flipflop_vlg_check_tst tb_out(
	.lfsr0(lfsr0),
	.lfsr1(lfsr1),
	.lfsr2(lfsr2),
	.lfsr3(lfsr3),
	.lfsr4(lfsr4),
	.lfsrtest(lfsrtest),
	.sampler_rx(sampler)
);
endmodule

