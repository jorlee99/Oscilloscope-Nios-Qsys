// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2020 15:49:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    signal_retriever
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module signal_retriever_vlg_sample_tst(
	clk,
	cos,
	saw,
	select,
	sin,
	slow_clk,
	squ,
	sampler_tx
);
input  clk;
input [11:0] cos;
input [11:0] saw;
input [2:0] select;
input [11:0] sin;
input  slow_clk;
input [11:0] squ;
output sampler_tx;

reg sample;
time current_time;
always @(clk or cos or saw or select or sin or slow_clk or squ)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module signal_retriever_vlg_check_tst (
	out_signal,
	out_wave,
	sampler_rx
);
input [11:0] out_signal;
input [11:0] out_wave;
input sampler_rx;

reg [11:0] out_signal_expected;
reg [11:0] out_wave_expected;

reg [11:0] out_signal_prev;
reg [11:0] out_wave_prev;

reg [11:0] out_signal_expected_prev;
reg [11:0] out_wave_expected_prev;

reg [11:0] last_out_signal_exp;
reg [11:0] last_out_wave_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_signal_prev = out_signal;
	out_wave_prev = out_wave;
end

// update expected /o prevs

always @(trigger)
begin
	out_signal_expected_prev = out_signal_expected;
	out_wave_expected_prev = out_wave_expected;
end


// expected out_signal[ 11 ]
initial
begin
	out_signal_expected[11] = 1'bX;
end 
// expected out_signal[ 10 ]
initial
begin
	out_signal_expected[10] = 1'bX;
end 
// expected out_signal[ 9 ]
initial
begin
	out_signal_expected[9] = 1'bX;
end 
// expected out_signal[ 8 ]
initial
begin
	out_signal_expected[8] = 1'bX;
end 
// expected out_signal[ 7 ]
initial
begin
	out_signal_expected[7] = 1'bX;
end 
// expected out_signal[ 6 ]
initial
begin
	out_signal_expected[6] = 1'bX;
end 
// expected out_signal[ 5 ]
initial
begin
	out_signal_expected[5] = 1'bX;
end 
// expected out_signal[ 4 ]
initial
begin
	out_signal_expected[4] = 1'bX;
end 
// expected out_signal[ 3 ]
initial
begin
	out_signal_expected[3] = 1'bX;
end 
// expected out_signal[ 2 ]
initial
begin
	out_signal_expected[2] = 1'bX;
end 
// expected out_signal[ 1 ]
initial
begin
	out_signal_expected[1] = 1'bX;
end 
// expected out_signal[ 0 ]
initial
begin
	out_signal_expected[0] = 1'bX;
end 
// expected out_wave[ 11 ]
initial
begin
	out_wave_expected[11] = 1'bX;
end 
// expected out_wave[ 10 ]
initial
begin
	out_wave_expected[10] = 1'bX;
end 
// expected out_wave[ 9 ]
initial
begin
	out_wave_expected[9] = 1'bX;
end 
// expected out_wave[ 8 ]
initial
begin
	out_wave_expected[8] = 1'bX;
end 
// expected out_wave[ 7 ]
initial
begin
	out_wave_expected[7] = 1'bX;
end 
// expected out_wave[ 6 ]
initial
begin
	out_wave_expected[6] = 1'bX;
end 
// expected out_wave[ 5 ]
initial
begin
	out_wave_expected[5] = 1'bX;
end 
// expected out_wave[ 4 ]
initial
begin
	out_wave_expected[4] = 1'bX;
end 
// expected out_wave[ 3 ]
initial
begin
	out_wave_expected[3] = 1'bX;
end 
// expected out_wave[ 2 ]
initial
begin
	out_wave_expected[2] = 1'bX;
end 
// expected out_wave[ 1 ]
initial
begin
	out_wave_expected[1] = 1'bX;
end 
// expected out_wave[ 0 ]
initial
begin
	out_wave_expected[0] = 1'bX;
end 
// generate trigger
always @(out_signal_expected or out_signal or out_wave_expected or out_wave)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_signal = %b | expected out_wave = %b | ",out_signal_expected_prev,out_wave_expected_prev);
	$display("| real out_signal = %b | real out_wave = %b | ",out_signal_prev,out_wave_prev);
`endif
	if (
		( out_signal_expected_prev[0] !== 1'bx ) && ( out_signal_prev[0] !== out_signal_expected_prev[0] )
		&& ((out_signal_expected_prev[0] !== last_out_signal_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[0] = out_signal_expected_prev[0];
	end
	if (
		( out_signal_expected_prev[1] !== 1'bx ) && ( out_signal_prev[1] !== out_signal_expected_prev[1] )
		&& ((out_signal_expected_prev[1] !== last_out_signal_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[1] = out_signal_expected_prev[1];
	end
	if (
		( out_signal_expected_prev[2] !== 1'bx ) && ( out_signal_prev[2] !== out_signal_expected_prev[2] )
		&& ((out_signal_expected_prev[2] !== last_out_signal_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[2] = out_signal_expected_prev[2];
	end
	if (
		( out_signal_expected_prev[3] !== 1'bx ) && ( out_signal_prev[3] !== out_signal_expected_prev[3] )
		&& ((out_signal_expected_prev[3] !== last_out_signal_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[3] = out_signal_expected_prev[3];
	end
	if (
		( out_signal_expected_prev[4] !== 1'bx ) && ( out_signal_prev[4] !== out_signal_expected_prev[4] )
		&& ((out_signal_expected_prev[4] !== last_out_signal_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[4] = out_signal_expected_prev[4];
	end
	if (
		( out_signal_expected_prev[5] !== 1'bx ) && ( out_signal_prev[5] !== out_signal_expected_prev[5] )
		&& ((out_signal_expected_prev[5] !== last_out_signal_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[5] = out_signal_expected_prev[5];
	end
	if (
		( out_signal_expected_prev[6] !== 1'bx ) && ( out_signal_prev[6] !== out_signal_expected_prev[6] )
		&& ((out_signal_expected_prev[6] !== last_out_signal_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[6] = out_signal_expected_prev[6];
	end
	if (
		( out_signal_expected_prev[7] !== 1'bx ) && ( out_signal_prev[7] !== out_signal_expected_prev[7] )
		&& ((out_signal_expected_prev[7] !== last_out_signal_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[7] = out_signal_expected_prev[7];
	end
	if (
		( out_signal_expected_prev[8] !== 1'bx ) && ( out_signal_prev[8] !== out_signal_expected_prev[8] )
		&& ((out_signal_expected_prev[8] !== last_out_signal_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[8] = out_signal_expected_prev[8];
	end
	if (
		( out_signal_expected_prev[9] !== 1'bx ) && ( out_signal_prev[9] !== out_signal_expected_prev[9] )
		&& ((out_signal_expected_prev[9] !== last_out_signal_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[9] = out_signal_expected_prev[9];
	end
	if (
		( out_signal_expected_prev[10] !== 1'bx ) && ( out_signal_prev[10] !== out_signal_expected_prev[10] )
		&& ((out_signal_expected_prev[10] !== last_out_signal_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[10] = out_signal_expected_prev[10];
	end
	if (
		( out_signal_expected_prev[11] !== 1'bx ) && ( out_signal_prev[11] !== out_signal_expected_prev[11] )
		&& ((out_signal_expected_prev[11] !== last_out_signal_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_signal[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_signal_expected_prev);
		$display ("     Real value = %b", out_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_signal_exp[11] = out_signal_expected_prev[11];
	end
	if (
		( out_wave_expected_prev[0] !== 1'bx ) && ( out_wave_prev[0] !== out_wave_expected_prev[0] )
		&& ((out_wave_expected_prev[0] !== last_out_wave_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[0] = out_wave_expected_prev[0];
	end
	if (
		( out_wave_expected_prev[1] !== 1'bx ) && ( out_wave_prev[1] !== out_wave_expected_prev[1] )
		&& ((out_wave_expected_prev[1] !== last_out_wave_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[1] = out_wave_expected_prev[1];
	end
	if (
		( out_wave_expected_prev[2] !== 1'bx ) && ( out_wave_prev[2] !== out_wave_expected_prev[2] )
		&& ((out_wave_expected_prev[2] !== last_out_wave_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[2] = out_wave_expected_prev[2];
	end
	if (
		( out_wave_expected_prev[3] !== 1'bx ) && ( out_wave_prev[3] !== out_wave_expected_prev[3] )
		&& ((out_wave_expected_prev[3] !== last_out_wave_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[3] = out_wave_expected_prev[3];
	end
	if (
		( out_wave_expected_prev[4] !== 1'bx ) && ( out_wave_prev[4] !== out_wave_expected_prev[4] )
		&& ((out_wave_expected_prev[4] !== last_out_wave_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[4] = out_wave_expected_prev[4];
	end
	if (
		( out_wave_expected_prev[5] !== 1'bx ) && ( out_wave_prev[5] !== out_wave_expected_prev[5] )
		&& ((out_wave_expected_prev[5] !== last_out_wave_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[5] = out_wave_expected_prev[5];
	end
	if (
		( out_wave_expected_prev[6] !== 1'bx ) && ( out_wave_prev[6] !== out_wave_expected_prev[6] )
		&& ((out_wave_expected_prev[6] !== last_out_wave_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[6] = out_wave_expected_prev[6];
	end
	if (
		( out_wave_expected_prev[7] !== 1'bx ) && ( out_wave_prev[7] !== out_wave_expected_prev[7] )
		&& ((out_wave_expected_prev[7] !== last_out_wave_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[7] = out_wave_expected_prev[7];
	end
	if (
		( out_wave_expected_prev[8] !== 1'bx ) && ( out_wave_prev[8] !== out_wave_expected_prev[8] )
		&& ((out_wave_expected_prev[8] !== last_out_wave_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[8] = out_wave_expected_prev[8];
	end
	if (
		( out_wave_expected_prev[9] !== 1'bx ) && ( out_wave_prev[9] !== out_wave_expected_prev[9] )
		&& ((out_wave_expected_prev[9] !== last_out_wave_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[9] = out_wave_expected_prev[9];
	end
	if (
		( out_wave_expected_prev[10] !== 1'bx ) && ( out_wave_prev[10] !== out_wave_expected_prev[10] )
		&& ((out_wave_expected_prev[10] !== last_out_wave_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[10] = out_wave_expected_prev[10];
	end
	if (
		( out_wave_expected_prev[11] !== 1'bx ) && ( out_wave_prev[11] !== out_wave_expected_prev[11] )
		&& ((out_wave_expected_prev[11] !== last_out_wave_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_wave[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_wave_expected_prev);
		$display ("     Real value = %b", out_wave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_wave_exp[11] = out_wave_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module signal_retriever_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [11:0] cos;
reg [11:0] saw;
reg [2:0] select;
reg [11:0] sin;
reg slow_clk;
reg [11:0] squ;
// wires                                               
wire [11:0] out_signal;
wire [11:0] out_wave;

wire sampler;                             

// assign statements (if any)                          
signal_retriever i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.cos(cos),
	.out_signal(out_signal),
	.out_wave(out_wave),
	.saw(saw),
	.select(select),
	.sin(sin),
	.slow_clk(slow_clk),
	.squ(squ)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// cos[ 11 ]
initial
begin
	cos[11] = 1'b0;
end 
// cos[ 10 ]
initial
begin
	cos[10] = 1'b0;
end 
// cos[ 9 ]
initial
begin
	cos[9] = 1'b0;
end 
// cos[ 8 ]
initial
begin
	cos[8] = 1'b0;
end 
// cos[ 7 ]
initial
begin
	cos[7] = 1'b0;
end 
// cos[ 6 ]
initial
begin
	cos[6] = 1'b0;
end 
// cos[ 5 ]
initial
begin
	cos[5] = 1'b0;
end 
// cos[ 4 ]
initial
begin
	cos[4] = 1'b0;
end 
// cos[ 3 ]
initial
begin
	cos[3] = 1'b0;
end 
// cos[ 2 ]
initial
begin
	cos[2] = 1'b1;
end 
// cos[ 1 ]
initial
begin
	cos[1] = 1'b0;
end 
// cos[ 0 ]
initial
begin
	cos[0] = 1'b0;
end 
// saw[ 11 ]
initial
begin
	saw[11] = 1'b0;
end 
// saw[ 10 ]
initial
begin
	saw[10] = 1'b0;
end 
// saw[ 9 ]
initial
begin
	saw[9] = 1'b0;
end 
// saw[ 8 ]
initial
begin
	saw[8] = 1'b0;
end 
// saw[ 7 ]
initial
begin
	saw[7] = 1'b0;
end 
// saw[ 6 ]
initial
begin
	saw[6] = 1'b0;
end 
// saw[ 5 ]
initial
begin
	saw[5] = 1'b0;
end 
// saw[ 4 ]
initial
begin
	saw[4] = 1'b0;
end 
// saw[ 3 ]
initial
begin
	saw[3] = 1'b0;
end 
// saw[ 2 ]
initial
begin
	saw[2] = 1'b0;
end 
// saw[ 1 ]
initial
begin
	saw[1] = 1'b1;
end 
// saw[ 0 ]
initial
begin
	saw[0] = 1'b0;
end 
// select[ 2 ]
initial
begin
	select[2] = 1'b0;
	select[2] = #40000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #30000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #50000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #80000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #50000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #30000 1'b1;
	select[2] = #30000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #20000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #50000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #10000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #40000 1'b1;
	select[2] = #30000 1'b0;
	select[2] = #20000 1'b1;
	select[2] = #10000 1'b0;
	select[2] = #10000 1'b1;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b1;
	select[1] = #20000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #30000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #30000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #30000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #40000 1'b1;
	select[1] = #20000 1'b0;
	select[1] = #50000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #20000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #50000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #30000 1'b1;
	select[1] = #30000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #30000 1'b0;
	select[1] = #50000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #30000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #10000 1'b1;
	select[1] = #40000 1'b0;
	select[1] = #30000 1'b1;
	select[1] = #20000 1'b0;
	select[1] = #20000 1'b1;
	select[1] = #10000 1'b0;
	select[1] = #40000 1'b1;
end 
// select[ 0 ]
initial
begin
	select[0] = 1'b1;
	select[0] = #20000 1'b0;
	select[0] = #20000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #20000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #20000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #20000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #20000 1'b1;
	select[0] = #60000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #40000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #40000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #50000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #40000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #20000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #40000 1'b0;
	select[0] = #50000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #20000 1'b1;
	select[0] = #10000 1'b0;
	select[0] = #10000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
end 
// sin[ 11 ]
initial
begin
	sin[11] = 1'b0;
end 
// sin[ 10 ]
initial
begin
	sin[10] = 1'b0;
end 
// sin[ 9 ]
initial
begin
	sin[9] = 1'b0;
end 
// sin[ 8 ]
initial
begin
	sin[8] = 1'b0;
end 
// sin[ 7 ]
initial
begin
	sin[7] = 1'b0;
end 
// sin[ 6 ]
initial
begin
	sin[6] = 1'b0;
end 
// sin[ 5 ]
initial
begin
	sin[5] = 1'b0;
end 
// sin[ 4 ]
initial
begin
	sin[4] = 1'b0;
end 
// sin[ 3 ]
initial
begin
	sin[3] = 1'b0;
end 
// sin[ 2 ]
initial
begin
	sin[2] = 1'b0;
end 
// sin[ 1 ]
initial
begin
	sin[1] = 1'b1;
end 
// sin[ 0 ]
initial
begin
	sin[0] = 1'b1;
end 

// slow_clk
initial
begin
	repeat(21)
	begin
		slow_clk = 1'b0;
		slow_clk = #23000 1'b1;
		# 23000;
	end
	slow_clk = 1'b0;
	slow_clk = #23000 1'b1;
end 
// squ[ 11 ]
initial
begin
	squ[11] = 1'b0;
end 
// squ[ 10 ]
initial
begin
	squ[10] = 1'b0;
end 
// squ[ 9 ]
initial
begin
	squ[9] = 1'b0;
end 
// squ[ 8 ]
initial
begin
	squ[8] = 1'b0;
end 
// squ[ 7 ]
initial
begin
	squ[7] = 1'b0;
end 
// squ[ 6 ]
initial
begin
	squ[6] = 1'b0;
end 
// squ[ 5 ]
initial
begin
	squ[5] = 1'b0;
end 
// squ[ 4 ]
initial
begin
	squ[4] = 1'b0;
end 
// squ[ 3 ]
initial
begin
	squ[3] = 1'b0;
end 
// squ[ 2 ]
initial
begin
	squ[2] = 1'b0;
end 
// squ[ 1 ]
initial
begin
	squ[1] = 1'b0;
end 
// squ[ 0 ]
initial
begin
	squ[0] = 1'b1;
end 

signal_retriever_vlg_sample_tst tb_sample (
	.clk(clk),
	.cos(cos),
	.saw(saw),
	.select(select),
	.sin(sin),
	.slow_clk(slow_clk),
	.squ(squ),
	.sampler_tx(sampler)
);

signal_retriever_vlg_check_tst tb_out(
	.out_signal(out_signal),
	.out_wave(out_wave),
	.sampler_rx(sampler)
);
endmodule

